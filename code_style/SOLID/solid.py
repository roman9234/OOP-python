# Принципы SOLID. Благодаря этим принципам проект можно легко масштабировать и развивать.



# Что такое SOLID.
# Преимущества:
# 1 - простота поддержки:
# все программисты пишут одинаково и по одним и тем же принципам
# SOLID позволяет обозначить чёткие правила, которые все понимают одинаково

# 2 - простота расширения существующего функционала:
# старый функцинал не будет сломан

# 3 - простота разработки нового функционала
# добавление полностью нового функционала не поломает старый

# 4 - стабильное развитие системы в течение долгого времени:
# сложность системы будет расти линейно
# SOLID позволяет долгое время поддерживать систему, и она не скатится в говнокод



# Недостатки SOLID
# 1 - больше кода (классы, импорты, новые файлы)
# 2 - нужно думать. Не писать как попало, проверять фрагменты кода на соответвие SOLID



# Single Responsibility.
# Принцип единственной ответственнойсти
# компонент должен быть ответственен за одну вещь
#
# Что такое Single Responsibility.
# Пример использования.
# Преимущества этого подхода.
# image

#  Open-close. Видео — 19 минут.
# Принцип открытости-закрытости. Открыт для изменения, закрыт для модификации

# Что такое Open-close.
# Пример использования.
# Преимущества этого подхода.
# image
# Liskov substitution. Видео — 14 минут.
#
# Что такое Liskov substitution.
# Вместо родителя можно использовать любого из его потомков

# Пример использования.
# Преимущества этого подхода.
# image
# Interface segregation. Видео — 12 минут.
# Интерфейс должны быть маленькими и удобными


# Что такое Interface segregation.
#

# Пример использования.
# Преимущества этого подхода.
# image
#  Dependency Inversion. Видео — 17 минут.
# Принцип инверсии зависимости

#
# Что такое Dependency Inversion.
# Пример использования.
# Преимущества этого подхода.
# image
# Воркшоп. Видео — 99 минут.
#
# Разберем, к каким последствиям может привести нарушение принципов SOLID.
# Посмотрим, как с течением времени меняется проект, если принципы SOLID соблюдены.

